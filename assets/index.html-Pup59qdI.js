import{_ as s,c as n,a,o as l}from"./app-vo1rYq2c.js";const e={};function t(p,i){return l(),n("div",null,i[0]||(i[0]=[a(`<h2 id="一个完整的linux-系统的构成" tabindex="-1"><a class="header-anchor" href="#一个完整的linux-系统的构成"><span>一个完整的Linux 系统的构成</span></a></h2><p>对于在qemu中运行的系统，必要组件为</p><ul><li>Linux Kernel</li><li>rootfs</li></ul><p>对于一个arm芯片上运行的linux操作系统，其包含以下3个部分</p><ul><li>u-boot</li><li>rootfs</li><li>kernel</li></ul><p>initrd 加载一个临时的根文件系统到 memory中 有两种不同的实现方法。</p><ul><li>initrd - 第一个进程: /linuxrc，执行结束后认为真实的文件系统的以及被挂载，接着执行/sbin/init开始正常用户空间的boot 进程。</li><li>initramfs - 从 linux kernel 2.6.13开始可用</li></ul><p>ubuntu_base 就是一个rootfs，一个全量版的大小为5</p><h2 id="系统启动流程" tabindex="-1"><a class="header-anchor" href="#系统启动流程"><span>系统启动流程</span></a></h2><div class="hint-container info"><p class="hint-container-title">相关信息</p><ol><li>Linux 内核在存储时通常是<mark>以压缩状态存在</mark>的。具体来说，内核镜像文件（通常称为 bzImage）是经过压缩的，以便减少其占用的磁盘空间并加快加载速度。压缩后的内核会在系统启动时由引导程序加载到内存，然后进行解压缩并运行。</li></ol></div><p><mark>内核阶段</mark></p><ol><li>加载内核:引导程序（如 GRUB）加载内核镜像（kernel），内核启动并开始初始化硬件。</li></ol><p><mark>initramfs/initrd 阶段</mark></p><p><mark>init</mark> 2. <code>/sbin/init</code>,第一个用户空间进程（非内核进程）,PID是1，用于初始化和配置用户空间环境。 1. /etc/inittab 2. /etc/rc.d/rc.sysinit 3. 在传统的 SysV init 系统中，内核模块加载可以通过 <code>/etc/modules.conf</code> 文件（或 <code>/etc/modules.d</code> ）来指定，系统会按照这些配置文件中的指示加载内核模块。 4. SYStemd</p><div class="hint-container caution"><p class="hint-container-title">警告</p><p>文件系统到底提供了什么功能</p></div><h2 id="构建第一个linux镜像" tabindex="-1"><a class="header-anchor" href="#构建第一个linux镜像"><span>构建第一个linux镜像</span></a></h2><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>本节中生成的镜像包含两个部分</p><ul><li><code>kernel</code>编译出的<code>bzImage</code></li><li><code>busybox</code>编译出的<code>initramfs-busybox-x86.cpio.gz</code></li></ul></div><h3 id="安装qemu-x86" tabindex="-1"><a class="header-anchor" href="#安装qemu-x86"><span>安装QEMU x86</span></a></h3><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>sudo apt install build-essential git kconfig-frontends flex bison libelf-dev bc libssl-dev qemu qemu-system-x86</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="下载linux和busybox" tabindex="-1"><a class="header-anchor" href="#下载linux和busybox"><span>下载linux和busybox</span></a></h3><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>本节构建的系统均在 <code>~/kdev</code> 文件夹下完成</p></div><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">cd</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $HOME</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">mkdir</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> kdev</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># compile busybox   -&gt;  cpio</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">cd</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ~/kdev</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">wget</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> http://busybox.net/downloads/busybox-1.36.1.tar.bz2</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">tar</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -xvf</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> busybox-1.36.1.tar.bz2</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">cd</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> busybox-1.36.1</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">make</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> O=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">$HOME</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/kdev/busybox-1.36.1/build/busybox-x86</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> defconfig</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">make</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> O=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">$HOME</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/kdev/busybox-1.36.1/build/busybox-x86</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> menuconfig</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># Setting --&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#    -- Build Options</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#    勾选 Build static library (no shared libs)</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">cd</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> build/busybox-x86</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">make</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -j8</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">make</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> install</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 构建 cpio.gz</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">mkdir</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -p</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $HOME</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/kdev/busybox-1.36.1/build/initramfs/busybox-x86</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">cd</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $HOME</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/kdev/busybox-1.36.1/build/initramfs/busybox-x86</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">mkdir</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -pv</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> {bin,sbin,etc,proc,sys,usr/{bin,sbin}}</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">cp</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -av</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ../../busybox-x86/_install/</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">*</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> .</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">## 创建 init</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">touch</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> init</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">vim</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> init</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">## 构建压缩过的initramfs-busybox-x86.cpio.gz</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">find</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> .</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -print0</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> |</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> cpio</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --null</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -ov</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --format=newc</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> |</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> gzip</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -9</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ../initramfs-busybox-x86.cpio.gz</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># compile linux</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> clone</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> https://github.com/torvalds/linux.git</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">cd</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> linux</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">mkdir</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> build/linux-x86-basic</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">make</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> O=/home/hao/kdev/linux/build/linux-x86-basic/</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> x86_64_defconfig</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">make</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> O=/home/hao/kdev/linux/build/linux-x86-basic/</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> kvm_guest.config</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">cd</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> build/linux-x86-basic</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">make</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -j8</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> #大约5分钟</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 启动 qemu</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">qemu-system-x86_64</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> \\</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">-kernel </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">$HOME</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/kdev/linux/build/linux-x86-basic/arch/x86_64/boot/bzImage</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> \\</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">-initrd </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">$HOME</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/kdev/busybox-1.36.1/build/initramfs/initramfs-busybox-x86.cpio.gz</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> \\</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">-nographic </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">-append</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">console=ttyS0</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> \\</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">-enable-kvm</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>-enable-kvm</code> 是 QEMU 的命令行参数之一，用于启用 KVM（Kernel-based Virtual Machine）加速技术。它的作用是让 QEMU 使用主机系统的 KVM 模块来加速虚拟机的执行。</p><p>对于busybox 1.24.2,在 ubuntu22.04上编译报没有rpc/rpc.h， 1.36.1没有这个问题</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">networking/inetd.c:178:11:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> fatal</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> rpc/rpc.h:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> No</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> such</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> file</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> or</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> directory</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">          32</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> |</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> #include &lt;rpc/rpc.h&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ubuntu-core" tabindex="-1"><a class="header-anchor" href="#ubuntu-core"><span>ubuntu core</span></a></h2><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><p>https://gist.github.com/ncmiller/d61348b27cb17debd2a6c20966409e86</p><p>https://developer.nvidia.com/embedded/jetpack</p><p>https://www.cnblogs.com/lvzh/p/14907592.html</p><p>https://www.cnblogs.com/bruce1992/p/17670128.html</p>`,31)]))}const k=s(e,[["render",t],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/article/m13iic48/","title":"01_qemu_x86_with_linux","lang":"zh-CN","frontmatter":{"title":"01_qemu_x86_with_linux","createTime":"2024/10/10 07:31:15","permalink":"/article/m13iic48/","description":"一个完整的Linux 系统的构成 对于在qemu中运行的系统，必要组件为 Linux Kernel rootfs 对于一个arm芯片上运行的linux操作系统，其包含以下3个部分 u-boot rootfs kernel initrd 加载一个临时的根文件系统到 memory中 有两种不同的实现方法。 initrd - 第一个进程: /linuxrc，...","head":[["meta",{"property":"og:url","content":"https://hyaline.qyswarm.top/article/m13iic48/"}],["meta",{"property":"og:site_name","content":"Reflections of Hyaline"}],["meta",{"property":"og:title","content":"01_qemu_x86_with_linux"}],["meta",{"property":"og:description","content":"一个完整的Linux 系统的构成 对于在qemu中运行的系统，必要组件为 Linux Kernel rootfs 对于一个arm芯片上运行的linux操作系统，其包含以下3个部分 u-boot rootfs kernel initrd 加载一个临时的根文件系统到 memory中 有两种不同的实现方法。 initrd - 第一个进程: /linuxrc，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-15T07:04:52.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-15T07:04:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"01_qemu_x86_with_linux\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-15T07:04:52.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"一个完整的Linux 系统的构成","slug":"一个完整的linux-系统的构成","link":"#一个完整的linux-系统的构成","children":[]},{"level":2,"title":"系统启动流程","slug":"系统启动流程","link":"#系统启动流程","children":[]},{"level":2,"title":"构建第一个linux镜像","slug":"构建第一个linux镜像","link":"#构建第一个linux镜像","children":[{"level":3,"title":"安装QEMU x86","slug":"安装qemu-x86","link":"#安装qemu-x86","children":[]},{"level":3,"title":"下载linux和busybox","slug":"下载linux和busybox","link":"#下载linux和busybox","children":[]}]},{"level":2,"title":"ubuntu core","slug":"ubuntu-core","link":"#ubuntu-core","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"readingTime":{"minutes":2.49,"words":746},"git":{"createdTime":1728805878000,"updatedTime":1728975892000,"contributors":[{"name":"hyaline-wang","email":"hyaline-wang","commits":2}]},"autoDesc":true,"filePathRelative":"Jetson/01_qemu_x86_with_linux.md","categoryList":[{"id":"948e40","sort":10000,"name":"Jetson"}]}');export{k as comp,d as data};
