import{_ as a,c as i,a as n,o as e}from"./app-vo1rYq2c.js";const l={};function t(p,s){return e(),i("div",null,s[0]||(s[0]=[n(`<p>EGO_planner 无论需要经过多少个路径点，总可以简化问题为 <strong>从当前位置到达下一个路径点</strong></p><p>当一切正常发生时，流程简化为 <img src="https://emnavi-doc-img.oss-cn-beijing.aliyuncs.com/hao_doc/Pasted image 20240724170259.png" alt=""> 里面包含了</p><p><strong>planNextWaypoint</strong> ：全局路径规划(当前所在位置-&gt;到下一个目标位置)，结果表示为 5次多项式</p><p><strong>planFromGlobalTraj</strong>: B-spline优化</p><p>还有一个与planFromGlobalTraj 相似的 函数 <strong>planFromCurrentTraj</strong>：区别主要是 起点的选取</p><h1 id="fsm" tabindex="-1"><a class="header-anchor" href="#fsm"><span>FSM</span></a></h1><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    enum</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> FSM_EXEC_STATE</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">      INIT</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">      WAIT_TARGET</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">      GEN_NEW_TRAJ</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">      REPLAN_TRAJ</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">      EXEC_TRAJ</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">      EMERGENCY_STOP</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">      SEQUENTIAL_START</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    };</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://emnavi-doc-img.oss-cn-beijing.aliyuncs.com/hao_doc/Pasted image 20240724170324.png" alt=""></p><h2 id="状态转换细节" tabindex="-1"><a class="header-anchor" href="#状态转换细节"><span>状态转换细节</span></a></h2><table><thead><tr><th>Old Status</th><th>New Status</th><th>细节</th></tr></thead><tbody><tr><td>INIT</td><td>WAIT_TARGET</td><td>odom 正常 (注意ego_planner在 没有障碍物信息的情况下是可以正常工作的，但没有odom是不行的)</td></tr><tr><td>WAIT_TARGET</td><td>SEQUENTIAL_START</td><td>have_target_ = true;have_trigger_ = true</td></tr><tr><td>第一次规划</td><td>SEQUENTIAL_START</td><td>执行 4-planFromGlobalTraj ，但似乎进不来</td></tr><tr><td>EXEC_TRAJ</td><td>GEN_NEW_TRAJ</td><td>切换条件 当距离当前目标点足够近（no_replan_thresh_） 且有下一个点时,执行 planNextWaypoint,在函数中成功后跳转</td></tr><tr><td>EXEC_TRAJ</td><td>WAIT_TRAGET</td><td></td></tr></tbody></table><h1 id="疑问" tabindex="-1"><a class="header-anchor" href="#疑问"><span>疑问</span></a></h1><p>只有7个状态,为什么状态字符有8个，有一个没有初始化不会报错吗</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    static</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> string </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">state_str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">8</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">INIT</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">WAIT_TARGET</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">GEN_NEW_TRAJ</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">REPLAN_TRAJ</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">EXEC_TRAJ</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">EMERGENCY_STOP</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">SEQUENTIAL_START</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h1 id="_3-plannextwaypoint" tabindex="-1"><a class="header-anchor" href="#_3-plannextwaypoint"><span>3-planNextWaypoint</span></a></h1><p>核心目标：获取一条多项式轨迹 <a href="#3.1-GlobalTraj">3.1-GlobalTraj</a><br> 次要目标：可视化多项式轨迹</p><h2 id="程序流程" tabindex="-1"><a class="header-anchor" href="#程序流程"><span>程序流程</span></a></h2><ol><li>获取多项式执行时间</li><li>间隔0.1秒取点</li><li>形成一条路径</li><li>发布</li><li>进入下一个状态 <ul><li>WAIT_TARGET</li><li>REPLAN_TRAJ (当前状态必须不为 EXEC_TRAJ)</li></ul></li></ol><h2 id="_3-1-globaltraj" tabindex="-1"><a class="header-anchor" href="#_3-1-globaltraj"><span>3.1-GlobalTraj</span></a></h2><table><thead><tr><th>Index</th><th>功能</th><th>细节</th></tr></thead><tbody><tr><td>1</td><td>input</td><td><ul><li>当前 odom（p,v,a=0） 作为 start_poin</li><li>Next_wp（p,v=0,a=0）作为 end_point</li></ul></td></tr><tr><td>2</td><td>点差值</td><td>最大点间距 = 4m ，否则 等距差值</td></tr><tr><td>3</td><td>多项式初始轨迹</td><td><ul><li>没有中间点(差值点)时(只有起止点)，直接解方程</li><li>有中间点(差值点)时，minSnapTraj</li></ul></td></tr></tbody></table><h2 id="_3-2五次多项式" tabindex="-1"><a class="header-anchor" href="#_3-2五次多项式"><span>3.2五次多项式</span></a></h2><p>两种用法</p><ul><li>没有中间点</li><li>有中间点（minSnapTraj）</li></ul><h1 id="tips" tabindex="-1"><a class="header-anchor" href="#tips"><span>Tips</span></a></h1><p>B-spline 初始化 时还会再用一次 多项式做初始化，注意区分开</p><h1 id="_4-planfromglobaltraj" tabindex="-1"><a class="header-anchor" href="#_4-planfromglobaltraj"><span>4-planFromGlobalTraj</span></a></h1><p>主要在调用</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    bool</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> flag_random_poly_init</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">timesOfConsecutiveStateCalls</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">().</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">first</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">      flag_random_poly_init </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    else</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">      flag_random_poly_init </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>start_pt_ = odom_pos_; 获取 目标点</li></ul><h2 id="_4-1-callreboundreplan" tabindex="-1"><a class="header-anchor" href="#_4-1-callreboundreplan"><span>4.1-callReboundReplan</span></a></h2><p><strong>1.getLocalTarget</strong></p><p>核心其实也就是从一个全局多项式轨迹中确定一个ego_planner的下一个目标点</p><p><strong>2.从起点?遍历 多项式轨迹</strong></p><ol><li>若 一切顺利，则将最后一个点设置为局部点</li><li>若 遍历过程发现距离 &gt; planning_horizen_ 的点 设置新的局部点</li><li>若 一开始就发现距离已经 &gt; planning_horizen_ 则找到第一个小于 planning_horizen_ 的点再进行 2 <ol><li>想象不到这种情况</li></ol></li></ol><p><strong>终点处理</strong></p><p>剩下的距离已经不够减速了</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>D</mi><mrow><mi>l</mi><mi>o</mi><mi>c</mi><mi>a</mi><mi>l</mi><mo>−</mo><mo>&gt;</mo><mi>e</mi><mi>n</mi><mi>d</mi></mrow></msub><mo>&lt;</mo><mfrac><msup><mi>v</mi><mn>2</mn></msup><mrow><mn>2</mn><mi>a</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex"> D_{local-&gt;end}&lt;\\frac{v^2}{2a} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">oc</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mtight">−</span><span class="mrel mtight">&gt;</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.1771em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4911em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathnormal">a</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>则 local_target_vel_ 设为 0</p><ul><li>last_progress_time_ , 新多项式产生时归0</li><li>global_duration_ 从多项式中来</li></ul><h3 id="reboundreplan" tabindex="-1"><a class="header-anchor" href="#reboundreplan"><span>reboundReplan</span></a></h3><p>(have_new_target_ || flag_use_poly_init), flag_randomPolyTraj);<br> 当距离 local_target_pt小于0.2m时 ，规划失败</p><h3 id="b-spline-优化" tabindex="-1"><a class="header-anchor" href="#b-spline-优化"><span>B-spline 优化</span></a></h3><h4 id="init" tabindex="-1"><a class="header-anchor" href="#init"><span>INIT</span></a></h4><p>#TODO</p><h4 id="publish-visualization" tabindex="-1"><a class="header-anchor" href="#publish-visualization"><span>Publish &amp;&amp; visualization</span></a></h4><hr><h1 id="_4-2b-spline优化" tabindex="-1"><a class="header-anchor" href="#_4-2b-spline优化"><span>4.2B-spline优化</span></a></h1><h2 id="_1-初始五次多项式" tabindex="-1"><a class="header-anchor" href="#_1-初始五次多项式"><span>1.初始五次多项式</span></a></h2><h3 id="五次多项式" tabindex="-1"><a class="header-anchor" href="#五次多项式"><span>五次多项式</span></a></h3><p>TIPS</p><ul><li>flag_first_call</li><li>flag_polyInit</li><li>flag_force_polynomial</li></ul><table><thead><tr><th>flag</th><th>作用</th></tr></thead><tbody><tr><td>flag_randomPolyTraj</td><td>在 planFromGlobalTraj 中若状态切换为true,否则 false;在 planFromCurrentTraj 为 false。</td></tr><tr><td>flag_use_poly_init</td><td>planFromGlobalTraj 为 true；planFromCurrentTraj 中 第一次调用callReboundReplan 为false，失败后再次调用时为true</td></tr></tbody></table><h1 id="_2-采样为-b-spline" tabindex="-1"><a class="header-anchor" href="#_2-采样为-b-spline"><span>2.采样为 B-spline</span></a></h1><h1 id="_3-optimize" tabindex="-1"><a class="header-anchor" href="#_3-optimize"><span>3. OPTIMIZE</span></a></h1><h1 id="_4-refine" tabindex="-1"><a class="header-anchor" href="#_4-refine"><span>4. REFINE</span></a></h1><h1 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h1><h2 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化"><span>初始化</span></a></h2><p>给出了两种 大模式</p><ul><li>地图选点</li><li>预设目标点组</li></ul><h2 id="预设目标点" tabindex="-1"><a class="header-anchor" href="#预设目标点"><span>预设目标点</span></a></h2><h2 id="触发" tabindex="-1"><a class="header-anchor" href="#触发"><span>触发</span></a></h2><h2 id="first" tabindex="-1"><a class="header-anchor" href="#first"><span>FIRST</span></a></h2><ul><li>读点</li><li>Rviz可视化目标点</li><li>[[3-planNextWaypoint]] 目标第一个点</li></ul><h2 id="地图选点" tabindex="-1"><a class="header-anchor" href="#地图选点"><span>地图选点</span></a></h2><h1 id="实验" tabindex="-1"><a class="header-anchor" href="#实验"><span>实验</span></a></h1><h1 id="ego-planner" tabindex="-1"><a class="header-anchor" href="#ego-planner"><span>Ego-planner</span></a></h1><ol><li>通电</li><li>检查无人机位置放置是否正确</li><li>为每架无人机启动节点</li><li>Start Server</li><li>测试VINS工作正常</li><li>若正常，不用重开</li><li>启动程序</li></ol><h2 id="nomachine-mode" tabindex="-1"><a class="header-anchor" href="#nomachine-mode"><span>nomachine mode</span></a></h2><p>Drone</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">cd</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ~/ego_env_sh/edge2</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">./one_shot_swarm.sh</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Server</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">roslaunch</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> swarm_terminal</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> swarm_terminal.launch</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">rosrun</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> swarm_terminal</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ego_control_node</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="nohup-mode" tabindex="-1"><a class="header-anchor" href="#nohup-mode"><span>nohup mode</span></a></h2><p>Drone</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">cd</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ~/ego_env_sh/edge2</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">./nohup_one_shot_swarm.sh</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Server</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">roslaunch</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> swarm_terminal</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> swarm_terminal.launch</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">rosrun</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> swarm_terminal</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ego_control_node</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="track" tabindex="-1"><a class="header-anchor" href="#track"><span>Track</span></a></h1><p>rosrun car_cooperation car_msg.py</p><p>./S_takeoff.sh ./S_back.sh ./S_land.sh</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>## nohup mode</span></span>
<span class="line"><span>\`\`\`bash</span></span>
<span class="line"><span>cd ~/ego_env_sh/edge2</span></span>
<span class="line"><span>./nohup_one_shot_with_vins.sh</span></span>
<span class="line"><span></span></span>
<span class="line"><span># new terminal</span></span>
<span class="line"><span>rosrun car_cooperation car_msg.py</span></span>
<span class="line"><span></span></span>
<span class="line"><span>./S_takeoff.sh</span></span>
<span class="line"><span>./S_back.sh</span></span>
<span class="line"><span>./S_land.sh</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,80)]))}const h=a(l,[["render",t],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/article/w8ma430w/","title":"ego_planner","lang":"zh-CN","frontmatter":{"title":"ego_planner","createTime":"2024/09/09 17:19:53","permalink":"/article/w8ma430w/","description":"EGO_planner 无论需要经过多少个路径点，总可以简化问题为 从当前位置到达下一个路径点 当一切正常发生时，流程简化为 里面包含了 planNextWaypoint ：全局路径规划(当前所在位置->到下一个目标位置)，结果表示为 5次多项式 planFromGlobalTraj: B-spline优化 还有一个与planFromGlobalTra...","head":[["meta",{"property":"og:url","content":"https://hyaline.qyswarm.top/article/w8ma430w/"}],["meta",{"property":"og:site_name","content":"Reflections of Hyaline"}],["meta",{"property":"og:title","content":"ego_planner"}],["meta",{"property":"og:description","content":"EGO_planner 无论需要经过多少个路径点，总可以简化问题为 从当前位置到达下一个路径点 当一切正常发生时，流程简化为 里面包含了 planNextWaypoint ：全局路径规划(当前所在位置->到下一个目标位置)，结果表示为 5次多项式 planFromGlobalTraj: B-spline优化 还有一个与planFromGlobalTra..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://emnavi-doc-img.oss-cn-beijing.aliyuncs.com/hao_doc/Pasted%20image%2020240724170259.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-09T16:38:45.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-09T16:38:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ego_planner\\",\\"image\\":[\\"https://emnavi-doc-img.oss-cn-beijing.aliyuncs.com/hao_doc/Pasted%20image%2020240724170259.png\\",\\"https://emnavi-doc-img.oss-cn-beijing.aliyuncs.com/hao_doc/Pasted%20image%2020240724170324.png\\"],\\"dateModified\\":\\"2024-09-09T16:38:45.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"状态转换细节","slug":"状态转换细节","link":"#状态转换细节","children":[]},{"level":2,"title":"程序流程","slug":"程序流程","link":"#程序流程","children":[]},{"level":2,"title":"3.1-GlobalTraj","slug":"_3-1-globaltraj","link":"#_3-1-globaltraj","children":[]},{"level":2,"title":"3.2五次多项式","slug":"_3-2五次多项式","link":"#_3-2五次多项式","children":[]},{"level":2,"title":"4.1-callReboundReplan","slug":"_4-1-callreboundreplan","link":"#_4-1-callreboundreplan","children":[{"level":3,"title":"reboundReplan","slug":"reboundreplan","link":"#reboundreplan","children":[]},{"level":3,"title":"B-spline 优化","slug":"b-spline-优化","link":"#b-spline-优化","children":[]}]},{"level":2,"title":"1.初始五次多项式","slug":"_1-初始五次多项式","link":"#_1-初始五次多项式","children":[{"level":3,"title":"五次多项式","slug":"五次多项式","link":"#五次多项式","children":[]}]},{"level":2,"title":"初始化","slug":"初始化","link":"#初始化","children":[]},{"level":2,"title":"预设目标点","slug":"预设目标点","link":"#预设目标点","children":[]},{"level":2,"title":"触发","slug":"触发","link":"#触发","children":[]},{"level":2,"title":"FIRST","slug":"first","link":"#first","children":[]},{"level":2,"title":"地图选点","slug":"地图选点","link":"#地图选点","children":[]},{"level":2,"title":"nomachine mode","slug":"nomachine-mode","link":"#nomachine-mode","children":[]},{"level":2,"title":"nohup mode","slug":"nohup-mode","link":"#nohup-mode","children":[]}],"readingTime":{"minutes":3.23,"words":968},"git":{"createdTime":1725899925000,"updatedTime":1725899925000,"contributors":[{"name":"hyaline-wang","email":"hyaline-wang","commits":1}]},"autoDesc":true,"filePathRelative":"notes/algorithm/ego_planner.md","categoryList":[{"id":"4358b5","sort":10006,"name":"notes"},{"id":"bcdb67","sort":10007,"name":"algorithm"}]}');export{h as comp,d as data};
